/**
 * Command messages from user:
 */

const requestStrings = {
    toMain: '–ù–∞ –≥–æ–ª–æ–≤–Ω—É üåê',
    materials: '–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ üßæ',
    newsSearch: '–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤–∏–Ω üîç',
    anotherRequest: '–Ü–Ω—à–∏–π –∑–∞–ø–∏—Ç üó≥',
    arrowNext: '‚ñ∂',
    arrowPrevious: '‚óÄ',
};

/**
 * Bot's responses:
 */

exports.BotAnswer = {
    whatDoYouWant: '–©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å? üßê',
    enterRequest: '–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç üìù',
    invalidDataNews: '–Ø–∫–∞—Å—å —ñ–∑ —Å—Ç–∞—Ç–µ–π –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ. ‚ùå',
    anythingElse: '–©–æ—Å—å —â–µ? üßê',
    noNews: '–ü–æ —Ü—å–æ–º—É –∑–∞–ø–∏—Ç—É –Ω–µ–º–∞—î –Ω–æ–≤–∏–Ω ‚ùå',
    isItSticker: '–ê —Å–ª–æ–≤–∞–º–∏? üßê',
};

/**
 * Buttons using command strings:
 */

exports.Button = {
    toMain: requestStrings.toMain,
    materials: requestStrings.materials,
    newsSearch: requestStrings.newsSearch,
    anotherRequest: requestStrings.anotherRequest,
    arrowNext: requestStrings.arrowNext,
    arrowPrevious: requestStrings.arrowPrevious,
};

/**
 * Regular expressions using command strings:
 */

exports.RegEx = {
    start: new RegExp('/start'),
    toMain: new RegExp(requestStrings.toMain),
    materials: new RegExp(requestStrings.materials),
    newsSearch: new RegExp(requestStrings.newsSearch),
    anotherRequest: new RegExp(requestStrings.anotherRequest),
};